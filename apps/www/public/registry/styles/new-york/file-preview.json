{
  "name": "file-preview",
  "dependencies": [
    "Input, Button"
  ],
  "files": [
    {
      "name": "file-preview.tsx",
      "content": "\nimport { Input } from \"@/registry/new-york/ui/input\"\nimport React from \"react\"\nimport Image from \"next/image\";\nimport { cn } from \"@/lib/utils\";\nimport { FileImage as LucideImage } from \"lucide-react\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { buttonVariants } from \"@/registry/new-york/ui/button\";\n\ntype FilePreviewContextProps = {\n  file: string | null\n  setFile: (file: string | null) => void\n}\n\nconst FilePreviewContext = React.createContext<FilePreviewContextProps | null>(null)\n\n\nfunction useFilePreviewContext() {\n  const context = React.useContext(FilePreviewContext)\n\n  if (!context) {\n    throw new Error(\"useFilePreviewContext must be used within a <FilePreviewContext />\")\n  }\n\n  return context\n}\n\nconst useFilePreview = () => {\n  const [file, setFile] = React.useState<string | null>(null);\n\n  return { file, setFile }\n}\n\ntype FileInputProps = {\n  className?: string\n}\n\nconst FileInput = React.forwardRef<HTMLInputElement, FileInputProps>(({ className, ...props }) => {\n  const { setFile } = useFilePreviewContext();\n  return (\n    <Input id=\"picture\" type=\"file\" accept=\"image/png, image/jpeg, image/svg\" className={cn(className)} {...props} onChange={(e) => {\n      const file = e.target.files?.[0]\n      if (file) {\n        setFile(URL.createObjectURL(file))\n      }\n    }} />\n  )\n});\nFileInput.displayName = \"FileInput\";\n\ntype FileButtonProps = {\n  className?: string\n  accept?: string\n} & VariantProps<typeof buttonVariants>;\n\nconst FileButton = React.forwardRef<HTMLInputElement, FileButtonProps>(({ className, variant, size, accept, ...props }: FileButtonProps) => {\n  const { setFile } = useFilePreviewContext();\n  const buttonVariant = buttonVariants({ variant, size, className }) || \"default\";\n  return (\n    <div>\n      <input id=\"inputButton\" type=\"file\" accept={accept ? accept : \"image/png, image/jpeg, image/svg\"} hidden onChange={(e) => {\n        const file = e.target.files?.[0]\n        if (file) {\n          setFile(URL.createObjectURL(file))\n        }\n      }} />\n      <label className={cn(\"flex cursor-pointer p-2\", buttonVariant, className)} {...props} htmlFor=\"inputButton\">{<LucideImage />}</label>\n    </div>\n  )\n\n});\n\nFileButton.displayName = \"FileButton\";\n\ntype FileImageProps = {\n  width: number\n  height: number\n  className?: string\n}\n\nconst FileImage = React.forwardRef<HTMLInputElement, FileImageProps>(({ width, height, className }: FileImageProps) => {\n  const { file } = useFilePreviewContext();\n\n  return (\n    <div>\n      {file && <Image width={width} height={height} src={file} alt=\"\" className={cn(`w-[${width}px] h-[${height}px]`, className)} />}\n    </div>\n  )\n});\n\nFileImage.displayName = \"FileImage\";\n\ntype FilePreviewProps = {\n  children: React.ReactNode\n  file: string | null\n  setFile: (file: string | null) => void\n}\n\nconst FilePreview = React.forwardRef<HTMLDivElement, FilePreviewProps>(({ children, file, setFile }) => {\n  return (\n    <FilePreviewContext.Provider value={{ file: file, setFile: setFile }}>\n      {children}\n    </FilePreviewContext.Provider>\n  )\n});\n\nFilePreview.displayName = \"FilePreview\";\n\nexport { FilePreview, FileImage, FileInput, FileButton, useFilePreview }\n"
    }
  ],
  "type": "components:ui"
}